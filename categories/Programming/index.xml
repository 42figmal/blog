<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on ARCHIVE</title><link>https://42figmal.github.io/blog/categories/Programming/</link><description>Recent content in Programming on ARCHIVE</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://42figmal.github.io/blog/categories/Programming/index.xml" rel="self" type="application/rss+xml"/><item><title>생성자</title><link>https://42figmal.github.io/blog/docs/CS/Swift/init/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://42figmal.github.io/blog/docs/CS/Swift/init/</guid><description>Initiallizer 생성자 # 클래스 안의 함수를 매서드라고 부르며, 매서드 중 클래스 안 저장 속성을 초기화하는 함수를 생성자 라고 부른다. 클래스가 품고있는 속성들이 많아질 경우 사용시 일일히 초기화하기 어렵기 때문에 우리는 초기화를 도와주는 생성자를 사용한다! init() 자동 구현 # 저장 속성의 기본값을 설정한 경우에는 스위프트에서 자동으로 init(생성자)를 구현해준다. 클래스로 인스턴스를 생성하는 var buleCake = Cake()는 사실 var blueCake = Cake.init()의 축약형. class Cake { var name: String = &amp;#34;블루케이크&amp;#34; var subname: String = &amp;#34;블루베리케이크&amp;#34; // 여기 숨어있지롱 // init() { // // } } var buleCake = Cake() Self.</description></item><item><title>여러가지 속성</title><link>https://42figmal.github.io/blog/docs/CS/Swift/property/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://42figmal.github.io/blog/docs/CS/Swift/property/</guid><description>Property # 1. 저장 속성 # 메모리 공간을 가지고 값을 저장할 수 있는 속성. Class Cake의 저장속성은 var name, var price !
class Cake { var name: String lazy var price: Double = 0.1 init (a:String) { name = a } } 2. 지연 저장 속성(Lazy Stored Properties) # 속성의 초기화를 지연시키는 것으로, 해당 속성은 제외한 상태로 진행하다가 후에 접근 시 초기화하는 것임. 나중에 변화가 생기는 것이므로 var 로 선언해야며 미리 초기화 해두어야하는 것이 포인트!</description></item></channel></rss>